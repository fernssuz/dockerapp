plugins {
    id 'org.springframework.boot' version '2.5.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "org.sonarqube" version "2.7"
    id 'jacoco'
    id 'pmd'
    id 'maven-publish'
}

group = 'ad'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.data:spring-data-redis:2.6.2'
    implementation 'io.lettuce:lettuce-core:6.1.6.RELEASE'


    implementation 'com.sendgrid:sendgrid-java:4.7.2'
    implementation 'org.freemarker:freemarker:2.3.31' //Sending email with freemarker template

    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation "org.testcontainers:testcontainers:1.16.0"
    testImplementation "org.testcontainers:junit-jupiter:1.16.0"
    testImplementation "org.testcontainers:postgresql:1.16.0"
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.31.0'
    testImplementation 'org.springframework:spring-context-support:5.1.0.RELEASE'

}

pmd {
    rulesMinimumPriority = 2
}

sonarqube {
    properties {
        property "sonar.exclusions", "**/model**"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/model**'])
        })
    }
}

// Setup Integration Tests; borrowed from activities-partner-api
sourceSets {
    // So that we can place source code in 'src/integrationTest/java':
    integrationTest {
        java {
            // So that we can compile against the business classes
            compileClasspath += main.output
            // So that we can compile against the libs used by the business classes
            compileClasspath += main.compileClasspath

            // So that we can compile against the unit test classes
            compileClasspath += test.output
            // So that we can compile against the libs used by the unit test classes
            compileClasspath += test.compileClasspath

            // So that test- and business classes can be used at runtime:
            runtimeClasspath += test.runtimeClasspath
        }
    }
}

// Define the integrationTest task
task integrationTest(type: Test) {
    // Need to specify the use of JUnit platform in order to run Junit 5 tests
    useJUnitPlatform()
    // So that Gradle knows where the integration test classes are:
    testClassesDirs = sourceSets.integrationTest.output.classesDirs

    // So that Gradle knows which runtime class path to use:
    classpath = sourceSets.integrationTest.runtimeClasspath
    classpath += files('src/test/resources')

    // Better report the test outcomes
    // Borrowed from https://gist.github.com/orip/4951642
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Integration Test Results: ${result.resultType} " +
                        "(${result.testCount} tests," +
                        "${result.successfulTestCount} successes," +
                        "${result.failedTestCount} failures," +
                        "${result.skippedTestCount} skipped)"
            }
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Test Results: ${result.resultType} " +
                        "(${result.testCount} tests," +
                        "${result.successfulTestCount} successes," +
                        "${result.failedTestCount} failures," +
                        "${result.skippedTestCount} skipped)"
            }
        }
    }
}


publishing {
    publications {
        maven(MavenPublication) {
            groupId 'sg'
            artifactId 'docker-app'
            artifact jar
        }
    }
    repositories {
        maven {
            url "${buildDir}/repo"
        }
    }
}